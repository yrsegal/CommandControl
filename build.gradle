buildscript {
    ext.kotlin_version = '1.0.2'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}
ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}.${config.build_number}"
group = "wiresegal.psionup"
archivesBaseName = config.mod_name

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"
    mappings = config.mc_mappings

    coreMod = "wiresegal.cmdctrl.asm.CommandControlLoadingPlugin"

    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'LibMisc.kt'
}

repositories {
    maven {
        url "http://mvn.rx14.co.uk/shadowfacts/"
    }
}

dependencies {
    compile "net.shadowfacts:Forgelin:1.2.0"
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'wiresegal.asm.CommandControlLoadingPlugin'
        attributes 'FMLCorePluginContainsMod': 'true'
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'TweakOrder': 0
        attributes 'MixinConfigs': 'wiresegal/cmdctrl/mixins/mixins_config.json'
    }
}

sourceSets { main.java.srcDirs += 'EvalEx/src' }
sourceSets { main.java.srcDirs += 'src/main/kotlin' }
idea {
    module {
        inheritOutputDirs = true
    }
    project {
        languageLevel = '1.8'
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
